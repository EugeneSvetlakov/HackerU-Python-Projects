"""
This type stub file was generated by pyright.
"""

import scapy.modules.six as six
from scapy.error import Scapy_Exception
from scapy.volatile import RandField
from scapy.utils import EnumElement, Enum_metaclass

"""
ASN.1 (Abstract Syntax Notation One)
"""
class RandASN1Object(RandField):
    def __init__(self, objlist=...) -> None:
        ...
    


class ASN1_Error(Scapy_Exception):
    ...


class ASN1_Encoding_Error(ASN1_Error):
    ...


class ASN1_Decoding_Error(ASN1_Error):
    ...


class ASN1_BadTag_Decoding_Error(ASN1_Decoding_Error):
    ...


class ASN1Codec(EnumElement):
    def register_stem(cls, stem): # -> None:
        ...
    
    def dec(cls, s, context=...):
        ...
    
    def safedec(cls, s, context=...):
        ...
    
    def get_stem(cls):
        ...
    


class ASN1_Codecs_metaclass(Enum_metaclass):
    element_class = ASN1Codec


class ASN1_Codecs(six.with_metaclass(ASN1_Codecs_metaclass)):
    BER = ...
    DER = ...
    PER = ...
    CER = ...
    LWER = ...
    BACnet = ...
    OER = ...
    SER = ...
    XER = ...


class ASN1Tag(EnumElement):
    def __init__(self, key, value, context=..., codec=...) -> None:
        ...
    
    def clone(self): # -> Self@ASN1Tag:
        ...
    
    def register_asn1_object(self, asn1obj): # -> None:
        ...
    
    def asn1_object(self, val):
        ...
    
    def register(self, codecnum, codec): # -> None:
        ...
    
    def get_codec(self, codec):
        ...
    


class ASN1_Class_metaclass(Enum_metaclass):
    element_class = ASN1Tag
    def __new__(cls, name, bases, dct):
        ...
    


class ASN1_Class(six.with_metaclass(ASN1_Class_metaclass)):
    ...


class ASN1_Class_UNIVERSAL(ASN1_Class):
    name = ...
    ERROR = ...
    RAW = ...
    NONE = ...
    ANY = ...
    BOOLEAN = ...
    INTEGER = ...
    BIT_STRING = ...
    STRING = ...
    NULL = ...
    OID = ...
    OBJECT_DESCRIPTOR = ...
    EXTERNAL = ...
    REAL = ...
    ENUMERATED = ...
    EMBEDDED_PDF = ...
    UTF8_STRING = ...
    RELATIVE_OID = ...
    SEQUENCE = ...
    SET = ...
    NUMERIC_STRING = ...
    PRINTABLE_STRING = ...
    T61_STRING = ...
    VIDEOTEX_STRING = ...
    IA5_STRING = ...
    UTC_TIME = ...
    GENERALIZED_TIME = ...
    GRAPHIC_STRING = ...
    ISO646_STRING = ...
    GENERAL_STRING = ...
    UNIVERSAL_STRING = ...
    CHAR_STRING = ...
    BMP_STRING = ...
    IPADDRESS = ...
    COUNTER32 = ...
    GAUGE32 = ...
    TIME_TICKS = ...


class ASN1_Object_metaclass(type):
    def __new__(cls, name, bases, dct): # -> Self@ASN1_Object_metaclass:
        ...
    


class ASN1_Object(six.with_metaclass(ASN1_Object_metaclass)):
    tag = ...
    def __init__(self, val) -> None:
        ...
    
    def enc(self, codec):
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __bytes__(self):
        ...
    
    def strshow(self, lvl=...):
        ...
    
    def show(self, lvl=...): # -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    


class ASN1_DECODING_ERROR(ASN1_Object):
    tag = ...
    def __init__(self, val, exc=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def enc(self, codec):
        ...
    


class ASN1_force(ASN1_Object):
    tag = ...
    def enc(self, codec):
        ...
    


class ASN1_BADTAG(ASN1_force):
    ...


class ASN1_INTEGER(ASN1_Object):
    tag = ...
    def __repr__(self): # -> str:
        ...
    


class ASN1_BOOLEAN(ASN1_INTEGER):
    tag = ...
    def __repr__(self): # -> str:
        ...
    


class ASN1_BIT_STRING(ASN1_Object):
    """
     ASN1_BIT_STRING values are bit strings like "011101".
     A zero-bit padded readable string is provided nonetheless,
     which is stored in val_readable
    """
    tag = ...
    def __init__(self, val, readable=...) -> None:
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class ASN1_STRING(ASN1_Object):
    tag = ...


class ASN1_NULL(ASN1_Object):
    tag = ...
    def __repr__(self): # -> str:
        ...
    


class ASN1_OID(ASN1_Object):
    tag = ...
    def __init__(self, val) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class ASN1_ENUMERATED(ASN1_INTEGER):
    tag = ...


class ASN1_UTF8_STRING(ASN1_STRING):
    tag = ...


class ASN1_NUMERIC_STRING(ASN1_STRING):
    tag = ...


class ASN1_PRINTABLE_STRING(ASN1_STRING):
    tag = ...


class ASN1_T61_STRING(ASN1_STRING):
    tag = ...


class ASN1_VIDEOTEX_STRING(ASN1_STRING):
    tag = ...


class ASN1_IA5_STRING(ASN1_STRING):
    tag = ...


class ASN1_UTC_TIME(ASN1_STRING):
    tag = ...
    def __init__(self, val) -> None:
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class ASN1_GENERALIZED_TIME(ASN1_UTC_TIME):
    tag = ...


class ASN1_ISO646_STRING(ASN1_STRING):
    tag = ...


class ASN1_UNIVERSAL_STRING(ASN1_STRING):
    tag = ...


class ASN1_BMP_STRING(ASN1_STRING):
    tag = ...


class ASN1_SEQUENCE(ASN1_Object):
    tag = ...
    def strshow(self, lvl=...):
        ...
    


class ASN1_SET(ASN1_SEQUENCE):
    tag = ...


class ASN1_IPADDRESS(ASN1_STRING):
    tag = ...


class ASN1_COUNTER32(ASN1_INTEGER):
    tag = ...


class ASN1_GAUGE32(ASN1_INTEGER):
    tag = ...


class ASN1_TIME_TICKS(ASN1_INTEGER):
    tag = ...


