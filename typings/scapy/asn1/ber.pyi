"""
This type stub file was generated by pyright.
"""

from scapy.asn1.asn1 import ASN1_BadTag_Decoding_Error, ASN1_Decoding_Error, ASN1_Encoding_Error
from scapy.modules import six

"""
Basic Encoding Rules (BER) for ASN.1
"""
class BER_Exception(Exception):
    ...


class BER_Encoding_Error(ASN1_Encoding_Error):
    def __init__(self, msg, encoded=..., remaining=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class BER_Decoding_Error(ASN1_Decoding_Error):
    def __init__(self, msg, decoded=..., remaining=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class BER_BadTag_Decoding_Error(BER_Decoding_Error, ASN1_BadTag_Decoding_Error):
    ...


def BER_len_enc(ll, size=...): # -> bytes:
    ...

def BER_len_dec(s): # -> tuple[int, Unknown]:
    ...

def BER_num_enc(ll, size=...): # -> bytes:
    ...

def BER_num_dec(s, cls_id=...): # -> tuple[Unknown, Unknown]:
    ...

def BER_id_dec(s): # -> tuple[int, Unknown]:
    ...

def BER_id_enc(n): # -> bytes:
    ...

def BER_tagging_dec(s, hidden_tag=..., implicit_tag=..., explicit_tag=..., safe=...): # -> tuple[int | None, Unknown]:
    ...

def BER_tagging_enc(s, implicit_tag=..., explicit_tag=...):
    ...

class BERcodec_metaclass(type):
    def __new__(cls, name, bases, dct): # -> Self@BERcodec_metaclass:
        ...
    


class BERcodec_Object(six.with_metaclass(BERcodec_metaclass)):
    codec = ...
    tag = ...
    @classmethod
    def asn1_object(cls, val):
        ...
    
    @classmethod
    def check_string(cls, s): # -> None:
        ...
    
    @classmethod
    def check_type(cls, s):
        ...
    
    @classmethod
    def check_type_get_len(cls, s): # -> tuple[int, Unknown]:
        ...
    
    @classmethod
    def check_type_check_len(cls, s): # -> tuple[int, Unknown, Unknown]:
        ...
    
    @classmethod
    def do_dec(cls, s, context=..., safe=...): # -> tuple[ASN1_BADTAG, Unknown]:
        ...
    
    @classmethod
    def dec(cls, s, context=..., safe=...):
        ...
    
    @classmethod
    def safedec(cls, s, context=...): # -> tuple[ASN1_BADTAG, Unknown] | tuple[ASN1_DECODING_ERROR, Literal['']]:
        ...
    
    @classmethod
    def enc(cls, s): # -> bytes:
        ...
    


class BERcodec_INTEGER(BERcodec_Object):
    tag = ...
    @classmethod
    def enc(cls, i): # -> bytes:
        ...
    
    @classmethod
    def do_dec(cls, s, context=..., safe=...): # -> tuple[Unknown, Unknown]:
        ...
    


class BERcodec_BOOLEAN(BERcodec_INTEGER):
    tag = ...


class BERcodec_BIT_STRING(BERcodec_Object):
    tag = ...
    @classmethod
    def do_dec(cls, s, context=..., safe=...): # -> tuple[Unknown, Unknown]:
        ...
    
    @classmethod
    def enc(cls, s): # -> bytes:
        ...
    


class BERcodec_STRING(BERcodec_Object):
    tag = ...
    @classmethod
    def enc(cls, s): # -> bytes:
        ...
    
    @classmethod
    def do_dec(cls, s, context=..., safe=...): # -> tuple[Unknown, Unknown]:
        ...
    


class BERcodec_NULL(BERcodec_INTEGER):
    tag = ...
    @classmethod
    def enc(cls, i): # -> bytes:
        ...
    


class BERcodec_OID(BERcodec_Object):
    tag = ...
    @classmethod
    def enc(cls, oid): # -> bytes:
        ...
    
    @classmethod
    def do_dec(cls, s, context=..., safe=...): # -> tuple[Unknown, Unknown]:
        ...
    


class BERcodec_ENUMERATED(BERcodec_INTEGER):
    tag = ...


class BERcodec_UTF8_STRING(BERcodec_STRING):
    tag = ...


class BERcodec_NUMERIC_STRING(BERcodec_STRING):
    tag = ...


class BERcodec_PRINTABLE_STRING(BERcodec_STRING):
    tag = ...


class BERcodec_T61_STRING(BERcodec_STRING):
    tag = ...


class BERcodec_VIDEOTEX_STRING(BERcodec_STRING):
    tag = ...


class BERcodec_IA5_STRING(BERcodec_STRING):
    tag = ...


class BERcodec_UTC_TIME(BERcodec_STRING):
    tag = ...


class BERcodec_GENERALIZED_TIME(BERcodec_STRING):
    tag = ...


class BERcodec_ISO646_STRING(BERcodec_STRING):
    tag = ...


class BERcodec_UNIVERSAL_STRING(BERcodec_STRING):
    tag = ...


class BERcodec_BMP_STRING(BERcodec_STRING):
    tag = ...


class BERcodec_SEQUENCE(BERcodec_Object):
    tag = ...
    @classmethod
    def enc(cls, ll): # -> bytes:
        ...
    
    @classmethod
    def do_dec(cls, s, context=..., safe=...):
        ...
    


class BERcodec_SET(BERcodec_SEQUENCE):
    tag = ...


class BERcodec_IPADDRESS(BERcodec_STRING):
    tag = ...
    @classmethod
    def enc(cls, ipaddr_ascii):
        ...
    
    @classmethod
    def do_dec(cls, s, context=..., safe=...): # -> tuple[Unknown, Unknown]:
        ...
    


class BERcodec_COUNTER32(BERcodec_INTEGER):
    tag = ...


class BERcodec_GAUGE32(BERcodec_INTEGER):
    tag = ...


class BERcodec_TIME_TICKS(BERcodec_INTEGER):
    tag = ...


