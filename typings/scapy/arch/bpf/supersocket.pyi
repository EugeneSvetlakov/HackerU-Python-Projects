"""
This type stub file was generated by pyright.
"""

from scapy.consts import FREEBSD
from scapy.supersocket import SuperSocket

"""
Scapy *BSD native support - BPF sockets
"""
if FREEBSD:
    BPF_ALIGNMENT = ...
else:
    BPF_ALIGNMENT = ...
    BPF_ALIGNMENT = ...
class _L2bpfSocket(SuperSocket):
    """"Generic Scapy BPF Super Socket"""
    desc = ...
    nonblocking_socket = ...
    def __init__(self, iface=..., type=..., promisc=..., filter=..., nofilter=..., monitor=...) -> None:
        ...
    
    def set_promisc(self, value): # -> None:
        """Set the interface in promiscuous mode"""
        ...
    
    def __del__(self): # -> None:
        """Close the file descriptor on delete"""
        ...
    
    def guess_cls(self): # -> Any | None:
        """Guess the packet class that must be used on the interface"""
        ...
    
    def set_nonblock(self, set_flag=...):
        """Set the non blocking flag on the socket"""
        ...
    
    def get_stats(self): # -> Tuple[Any, ...] | tuple[None, None]:
        """Get received / dropped statistics"""
        ...
    
    def get_blen(self): # -> Any | None:
        """Get the BPF buffer length"""
        ...
    
    def fileno(self): # -> socket:
        """Get the underlying file descriptor"""
        ...
    
    def close(self): # -> None:
        """Close the Super Socket"""
        ...
    
    def send(self, x): # -> NoReturn:
        """Dummy send method"""
        ...
    
    def recv_raw(self, x=...): # -> NoReturn:
        """Dummy recv method"""
        ...
    
    @staticmethod
    def select(sockets, remain=...): # -> list[Unknown]:
        """This function is called during sendrecv() routine to select
        the available sockets.
        """
        ...
    


class L2bpfListenSocket(_L2bpfSocket):
    """"Scapy L2 BPF Listen Super Socket"""
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def buffered_frames(self): # -> int:
        """Return the number of frames in the buffer"""
        ...
    
    def get_frame(self): # -> tuple[None, None, None]:
        """Get a frame or packet from the received list"""
        ...
    
    @staticmethod
    def bpf_align(bh_h, bh_c):
        """Return the index to the end of the current packet"""
        ...
    
    def extract_frames(self, bpf_buffer): # -> None:
        """Extract all frames from the buffer and stored them in the received list."""
        ...
    
    def recv_raw(self, x=...): # -> tuple[None, None, None]:
        """Receive a frame from the network"""
        ...
    


class L2bpfSocket(L2bpfListenSocket):
    """"Scapy L2 BPF Super Socket"""
    def send(self, x): # -> int:
        """Send a frame"""
        ...
    
    def nonblock_recv(self):
        """Non blocking receive"""
        ...
    


class L3bpfSocket(L2bpfSocket):
    def recv(self, x=...):
        """Receive on layer 3"""
        ...
    
    def send(self, pkt): # -> None:
        """Send a packet"""
        ...
    


def isBPFSocket(obj): # -> bool:
    """Return True is obj is a BPF Super Socket"""
    ...

def bpf_select(fds_list, timeout=...): # -> list[Unknown]:
    """A call to recv() can return several frames. This functions hides the fact
       that some frames are read from the internal buffer."""
    ...

