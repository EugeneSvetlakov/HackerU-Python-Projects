"""
This type stub file was generated by pyright.
"""

import socket
from __future__ import absolute_import
from scapy.compat import Optional, Union, orb
from scapy.config import _set_conf_sockets, conf
from scapy.consts import BSD, LINUX, SOLARIS, WINDOWS
from scapy.data import ARPHDR_ETHER, ARPHDR_LOOPBACK, IPV6_ADDR_GLOBAL
from scapy.error import Scapy_Exception
from scapy.interfaces import NetworkInterface, get_if_list, get_working_if
from scapy.pton_ntop import inet_ntop, inet_pton
from scapy.arch.linux import *
from scapy.arch.unix import in6_getifaddr, read_routes, read_routes6
from scapy.arch.bpf.core import *

"""
Operating system specific functionality.
"""
__all__ = ["get_if_addr", "get_if_addr6", "get_if_hwaddr", "get_if_list", "get_if_raw_addr", "get_if_raw_addr6", "get_if_raw_hwaddr", "get_working_if", "in6_getifaddr", "read_routes", "read_routes6"]
def str2mac(s): # -> str:
    ...

def get_if_addr(iff: str) -> str:
    """
    Returns the IPv4 of an interface or "0.0.0.0" if not available
    """
    ...

def get_if_hwaddr(iff: Union[NetworkInterface, str]) -> str:
    """
    Returns the MAC (hardware) address of an interface
    """
    ...

def get_if_addr6(iff: NetworkInterface) -> Optional[str]:
    """
    Returns the main global unicast address associated with provided
    interface, in human readable form. If no global address is found,
    None is returned.
    """
    ...

def get_if_raw_addr6(iff: NetworkInterface) -> Optional[bytes]:
    """
    Returns the main global unicast address associated with provided
    interface, in network format. If no global address is found, None
    is returned.
    """
    ...

if LINUX:
    ...
else:
    ...
if LINUX or BSD:
    ...
