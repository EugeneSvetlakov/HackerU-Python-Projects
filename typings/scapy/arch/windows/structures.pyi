"""
This type stub file was generated by pyright.
"""

import ctypes
from ctypes import Structure
from scapy.consts import WINDOWS_XP

"""
C API calls to Windows DLLs
"""
ANY_SIZE = ...
AF_UNSPEC = ...
NO_ERROR = ...
CHAR = ctypes.c_char
DWORD = ctypes.wintypes.DWORD
BOOL = ctypes.wintypes.BOOL
BOOLEAN = ctypes.wintypes.BOOLEAN
ULONG = ctypes.wintypes.ULONG
ULONGLONG = ctypes.c_ulonglong
HANDLE = ctypes.wintypes.HANDLE
LPWSTR = ctypes.wintypes.LPWSTR
VOID = ctypes.c_void_p
INT = ctypes.c_int
UINT = ctypes.wintypes.UINT
UINT8 = ctypes.c_uint8
UINT16 = ctypes.c_uint16
UINT32 = ctypes.c_uint32
UINT64 = ctypes.c_uint64
BYTE = ctypes.c_byte
UCHAR = UBYTE = ctypes.c_ubyte
SHORT = ctypes.c_short
USHORT = ctypes.c_ushort
_winapi_SetConsoleTitle = ...
SC_HANDLE = HANDLE
class SERVICE_STATUS(Structure):
    """https://docs.microsoft.com/en-us/windows/desktop/api/winsvc/ns-winsvc-_service_status"""
    _fields_ = ...


OpenServiceW = ...
CloseServiceHandle = ...
OpenSCManagerW = ...
QueryServiceStatus = ...
def get_service_status(service): # -> dict[Unknown, Unknown]:
    """Returns content of QueryServiceStatus for a service"""
    ...

iphlpapi = ...
class in_addr(Structure):
    _fields_ = ...


class in6_addr(Structure):
    _fields_ = ...


class sockaddr_in(Structure):
    _fields_ = ...


class sockaddr_in6(Structure):
    _fields_ = ...


class SOCKADDR_INET(ctypes.Union):
    _fields_ = ...


class MIBICMPSTATS(Structure):
    _fields_ = ...


class MIBICMPINFO(Structure):
    _fields_ = ...


class MIB_ICMP(Structure):
    _fields_ = ...


PMIB_ICMP = ...
_GetIcmpStatistics = ...
def GetIcmpStatistics(): # -> dict[Unknown, Unknown]:
    """Return all Windows ICMP stats from iphlpapi"""
    ...

MAX_ADAPTER_ADDRESS_LENGTH = ...
MAX_DHCPV6_DUID_LENGTH = ...
GAA_FLAG_INCLUDE_PREFIX = ...
GAA_FLAG_INCLUDE_ALL_INTERFACES = ...
PIP_ADAPTER_WINS_SERVER_ADDRESS_LH = VOID
PIP_ADAPTER_GATEWAY_ADDRESS_LH = VOID
PIP_ADAPTER_DNS_SUFFIX = VOID
IF_OPER_STATUS = UINT
IF_LUID = UINT64
NET_IF_COMPARTMENT_ID = UINT32
GUID = BYTE * 16
NET_IF_NETWORK_GUID = GUID
NET_IF_CONNECTION_TYPE = UINT
TUNNEL_TYPE = UINT
class SOCKET_ADDRESS(ctypes.Structure):
    _fields_ = ...


class _IP_ADAPTER_ADDRESSES_METRIC(Structure):
    _fields_ = ...


class IP_ADAPTER_UNICAST_ADDRESS(Structure):
    ...


PIP_ADAPTER_UNICAST_ADDRESS = ...
if WINDOWS_XP:
    ...
else:
    ...
class IP_ADAPTER_ANYCAST_ADDRESS(Structure):
    ...


PIP_ADAPTER_ANYCAST_ADDRESS = ...
class IP_ADAPTER_MULTICAST_ADDRESS(Structure):
    ...


PIP_ADAPTER_MULTICAST_ADDRESS = ...
class IP_ADAPTER_DNS_SERVER_ADDRESS(Structure):
    ...


PIP_ADAPTER_DNS_SERVER_ADDRESS = ...
class IP_ADAPTER_PREFIX(Structure):
    ...


PIP_ADAPTER_PREFIX = ...
class IP_ADAPTER_ADDRESSES(Structure):
    ...


LP_IP_ADAPTER_ADDRESSES = ...
if WINDOWS_XP:
    ...
else:
    ...
_GetAdaptersAddresses = ...
def GetAdaptersAddresses(AF=...): # -> list[Unknown]:
    """Return all Windows Adapters addresses from iphlpapi"""
    ...

class MIB_IPFORWARDROW(Structure):
    _fields_ = ...


class MIB_IPFORWARDTABLE(Structure):
    _fields_ = ...


PMIB_IPFORWARDTABLE = ...
_GetIpForwardTable = ...
def GetIpForwardTable(): # -> list[Unknown]:
    """Return all Windows routes (IPv4 only) from iphlpapi"""
    ...

NET_IFINDEX = ULONG
NL_ROUTE_PROTOCOL = INT
NL_ROUTE_ORIGIN = INT
class NET_LUID(Structure):
    _fields_ = ...


class IP_ADDRESS_PREFIX(Structure):
    _fields_ = ...


class MIB_IPFORWARD_ROW2(Structure):
    _fields_ = ...


class MIB_IPFORWARD_TABLE2(Structure):
    _fields_ = ...


PMIB_IPFORWARD_TABLE2 = ...
if notWINDOWS_XP:
    _GetIpForwardTable2 = ...
    _FreeMibTable = ...
def GetIpForwardTable2(AF=...): # -> list[Unknown]:
    """Return all Windows routes (IPv4/IPv6) from iphlpapi"""
    ...

