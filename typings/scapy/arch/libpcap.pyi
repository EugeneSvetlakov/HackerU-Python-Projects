"""
This type stub file was generated by pyright.
"""

import socket
from scapy.automaton import SelectableObject
from scapy.config import conf
from scapy.consts import WINDOWS
from scapy.interfaces import InterfaceProvider
from scapy.supersocket import SuperSocket

"""
Packet sending and receiving libpcap/WinPcap.
"""
if notscapy.consts.WINDOWS:
    ...
if nothasattr(socket, "AF_LINK"):
    ...
BIOCIMMEDIATE = ...
PCAP_IF_UP = ...
_pcap_if_flags = ...
class _L2libpcapSocket(SuperSocket, SelectableObject):
    def __init__(self) -> None:
        ...
    
    def recv_raw(self, x=...): # -> tuple[None, None, None] | tuple[alternative, Unknown, Unknown]:
        """Receives a packet, then returns a tuple containing (cls, pkt_data, time)"""
        ...
    
    def nonblock_recv(self):
        """Receives and dissect a packet in non-blocking mode."""
        ...
    
    @staticmethod
    def select(sockets, remain=...):
        ...
    


if conf.use_pcap:
    ...
if conf.use_pcap:
    class _PcapWrapper_libpcap:
        """Wrapper for the libpcap calls"""
        def __init__(self, device, snaplen, promisc, to_ms, monitor=...) -> None:
            ...
        
        def next(self): # -> tuple[None, None] | tuple[Any, bytes]:
            """
            Returns the next packet as the tuple
            (timestamp, raw_packet)
            """
            ...
        
        __next__ = ...
        def datalink(self): # -> Any:
            """Wrapper around pcap_datalink"""
            ...
        
        def fileno(self): # -> Any:
            ...
        
        def setfilter(self, f): # -> bool:
            ...
        
        def setnonblock(self, i): # -> None:
            ...
        
        def send(self, x): # -> None:
            ...
        
        def close(self): # -> None:
            ...
        
    
    
    open_pcap = _PcapWrapper_libpcap
    class LibpcapProvider(InterfaceProvider):
        """
        Load interfaces from Libpcap on non-Windows machines
        """
        name = ...
        libpcap = ...
        def load(self): # -> dict[Unknown, Unknown]:
            ...
        
        def reload(self): # -> dict[Unknown, Unknown]:
            ...
        
    
    
    class L2pcapListenSocket(_L2libpcapSocket):
        desc = ...
        def __init__(self, iface=..., type=..., promisc=..., filter=..., monitor=...) -> None:
            ...
        
        def send(self, x): # -> NoReturn:
            ...
        
    
    
    class L2pcapSocket(_L2libpcapSocket):
        desc = ...
        def __init__(self, iface=..., type=..., promisc=..., filter=..., nofilter=..., monitor=...) -> None:
            ...
        
        def send(self, x): # -> None:
            ...
        
    
    
    class L3pcapSocket(L2pcapSocket):
        desc = ...
        def recv(self, x=...):
            ...
        
        def send(self, x): # -> None:
            ...
        
    
    
else:
    ...
