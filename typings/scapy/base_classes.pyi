"""
This type stub file was generated by pyright.
"""

import scapy
import scapy.modules.six as six
from scapy.compat import Any, Dict, Generic, Iterator, List, Optional, Tuple, Type, Union, _Generic_metaclass

"""
Generators and packet meta classes.
"""
_T = ...
@six.add_metaclass(_Generic_metaclass)
class Gen(Generic[_T]):
    __slots__: List[str] = ...
    def __iter__(self) -> Iterator[_T]:
        ...
    
    def __iterlen__(self) -> int:
        ...
    


class SetGen(Gen[_T]):
    def __init__(self, values: Any, _iterpacket: int = ...) -> None:
        ...
    
    def __iter__(self) -> Iterator[Any]:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __repr__(self) -> str:
        ...
    


class Net(Gen[str]):
    """Network object from an IP address or hostname and mask"""
    name: str = ...
    family: int = ...
    max_mask: int = ...
    @classmethod
    def name2addr(cls, name: str) -> str:
        ...
    
    @classmethod
    def ip2int(cls, addr: str) -> int:
        ...
    
    @staticmethod
    def int2ip(val: int) -> str:
        ...
    
    def __init__(self, net: str, stop: Union[None, str] = ...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __iter__(self) -> Iterator[str]:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __iterlen__(self) -> int:
        ...
    
    def choice(self) -> str:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __eq__(self, other: Any) -> bool:
        ...
    
    def __ne__(self, other: Any) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __contains__(self, other: Any) -> bool:
        ...
    


class OID(Gen[str]):
    name = ...
    def __init__(self, oid: str) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __iter__(self) -> Iterator[str]:
        ...
    
    def __iterlen__(self) -> int:
        ...
    


class Packet_metaclass(_Generic_metaclass):
    def __new__(cls, name: str, bases: Tuple[type, ...], dct: Dict[str, Any]) -> Type[scapy.packet.Packet]:
        ...
    
    def __getattr__(self, attr: str) -> scapy.fields.Field[Any, Any]:
        ...
    
    def __call__(cls, *args: Any, **kargs: Any) -> scapy.packet.Packet:
        ...
    


class Field_metaclass(_Generic_metaclass):
    def __new__(cls, name: str, bases: Tuple[type, ...], dct: Dict[str, Any]) -> Type[scapy.fields.Field[Any, Any]]:
        ...
    


PacketList_metaclass = Field_metaclass
class BasePacket(Gen['scapy.packet.Packet']):
    __slots__: List[str] = ...


class BasePacketList(Gen[_T]):
    __slots__: List[str] = ...


class _CanvasDumpExtended:
    def canvas_dump(self, **kwargs: Any) -> pyx.canvas.canvas:
        ...
    
    def psdump(self, filename: Optional[str] = ..., **kargs: Any) -> None:
        """
        psdump(filename=None, layer_shift=0, rebuild=1)

        Creates an EPS file describing a packet. If filename is not provided a
        temporary file is created and gs is called.

        :param filename: the file's filename
        """
        ...
    
    def pdfdump(self, filename: Optional[str] = ..., **kargs: Any) -> None:
        """
        pdfdump(filename=None, layer_shift=0, rebuild=1)

        Creates a PDF file describing a packet. If filename is not provided a
        temporary file is created and xpdf is called.

        :param filename: the file's filename
        """
        ...
    
    def svgdump(self, filename: Optional[str] = ..., **kargs: Any) -> None:
        """
        svgdump(filename=None, layer_shift=0, rebuild=1)

        Creates an SVG file describing a packet. If filename is not provided a
        temporary file is created and gs is called.

        :param filename: the file's filename
        """
        ...
    


