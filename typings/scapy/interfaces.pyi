"""
This type stub file was generated by pyright.
"""

import scapy
from scapy.modules.six.moves import UserDict
from scapy.compat import Any, Dict, List, NoReturn, Optional, Type, Union

"""
Interfaces management
"""
class InterfaceProvider:
    name = ...
    headers = ...
    header_sort = ...
    libpcap = ...
    def load(self) -> Dict[str, NetworkInterface]:
        """Returns a dictionary of the loaded interfaces, by their
        name."""
        ...
    
    def reload(self) -> Dict[str, NetworkInterface]:
        """Same than load() but for reloads. By default calls load"""
        ...
    
    def l2socket(self) -> Type[scapy.supersocket.SuperSocket]:
        """Return L2 socket used by interfaces of this provider"""
        ...
    
    def l2listen(self) -> Type[scapy.supersocket.SuperSocket]:
        """Return L2listen socket used by interfaces of this provider"""
        ...
    
    def l3socket(self) -> Type[scapy.supersocket.SuperSocket]:
        """Return L3 socket used by interfaces of this provider"""
        ...
    


class NetworkInterface:
    def __init__(self, provider: InterfaceProvider, data: Optional[Dict[str, Any]] = ...) -> None:
        ...
    
    def update(self, data: Dict[str, Any]) -> None:
        """Update info about a network interface according
        to a given dictionary. Such data is provided by providers
        """
        ...
    
    def __eq__(self, other: Any) -> bool:
        ...
    
    def __ne__(self, other: Any) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def is_valid(self) -> bool:
        ...
    
    def l2socket(self) -> Type[scapy.supersocket.SuperSocket]:
        ...
    
    def l2listen(self) -> Type[scapy.supersocket.SuperSocket]:
        ...
    
    def l3socket(self) -> Type[scapy.supersocket.SuperSocket]:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __add__(self, other: str) -> str:
        ...
    
    def __radd__(self, other: str) -> str:
        ...
    


_GlobInterfaceType = Union[NetworkInterface, str]
class NetworkInterfaceDict(UserDict):
    """Store information about network interfaces and convert between names"""
    def __init__(self) -> None:
        ...
    
    def register_provider(self, provider: type) -> None:
        ...
    
    def load_confiface(self) -> None:
        """
        Reload conf.iface
        """
        ...
    
    def reload(self) -> None:
        ...
    
    def dev_from_name(self, name: str) -> NetworkInterface:
        """Return the first network device name for a given
        device name.
        """
        ...
    
    def dev_from_networkname(self, network_name: str) -> NoReturn:
        """Return interface for a given network device name."""
        ...
    
    def dev_from_index(self, if_index: int) -> NetworkInterface:
        """Return interface name from interface index"""
        ...
    
    def show(self, print_result: bool = ..., hidden: bool = ..., **kwargs: Any) -> Optional[str]:
        """
        Print list of available network interfaces in human readable form

        :param print_result: print the results if True, else return it
        :param hidden: if True, also displays invalid interfaces
        """
        ...
    
    def __repr__(self) -> str:
        ...
    


def get_if_list() -> List[str]:
    """Return a list of interface names"""
    ...

def get_working_if() -> NetworkInterface:
    """Return an interface that works"""
    ...

def get_working_ifaces() -> List[NetworkInterface]:
    """Return all interfaces that work"""
    ...

def dev_from_networkname(network_name: str) -> NetworkInterface:
    """Return Scapy device name for given network device name"""
    ...

def dev_from_index(if_index: int) -> NetworkInterface:
    """Return interface for a given interface index"""
    ...

def resolve_iface(dev: _GlobInterfaceType) -> NetworkInterface:
    """
    Resolve an interface name into the interface
    """
    ...

def network_name(dev: _GlobInterfaceType) -> str:
    """
    Resolves the device network name of a device or Scapy NetworkInterface
    """
    ...

def show_interfaces(resolve_mac: bool = ...) -> None:
    """Print list of available network interfaces"""
    ...

