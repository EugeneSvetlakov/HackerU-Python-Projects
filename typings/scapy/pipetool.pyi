"""
This type stub file was generated by pyright.
"""

import scapy.modules.six as six
from scapy.automaton import ObjectPipe

class PipeEngine(ObjectPipe):
    pipes = ...
    @classmethod
    def list_pipes(cls): # -> None:
        ...
    
    @classmethod
    def list_pipes_detailed(cls): # -> None:
        ...
    
    def __init__(self, *pipes) -> None:
        ...
    
    def __getattr__(self, attr): # -> (*args: Unknown, **kargs: Unknown) -> Unknown:
        ...
    
    def add_one_pipe(self, pipe): # -> None:
        ...
    
    def get_pipe_list(self, pipe): # -> set[Unknown]:
        ...
    
    def run(self): # -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def wait_and_stop(self): # -> None:
        ...
    
    def stop(self, _cmd=...):
        ...
    
    def add(self, *pipes): # -> None:
        ...
    
    def graph(self, **kargs):
        ...
    


class _ConnectorLogic:
    def __init__(self) -> None:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __lshift__(self, other):
        ...
    
    def __rshift__(self, other):
        ...
    
    def __floordiv__(self, other):
        ...
    
    def __xor__(self, other):
        ...
    
    def __hash__(self) -> int:
        ...
    


class _PipeMeta(type):
    def __new__(cls, name, bases, dct): # -> Self@_PipeMeta:
        ...
    


class Pipe(six.with_metaclass(_PipeMeta, _ConnectorLogic)):
    def __init__(self, name=...) -> None:
        ...
    
    def __repr__(self):
        ...
    


class Source(Pipe, ObjectPipe):
    def __init__(self, name=...) -> None:
        ...
    
    def deliver(self): # -> None:
        ...
    
    def exhausted(self): # -> bool:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    


class Drain(Pipe):
    """Repeat messages from low/high entries to (resp.) low/high exits

    .. code::

         +-------+
      >>-|-------|->>
         |       |
       >-|-------|->
         +-------+
    """
    def push(self, msg): # -> None:
        ...
    
    def high_push(self, msg): # -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    


class Sink(Pipe):
    """
    Does nothing; interface to extend for custom sinks.

    All sinks have the following constructor parameters:

    :param name: a human-readable name for the element
    :type name: str
    """
    def push(self, msg): # -> None:
        """
        Called by :py:class:`PipeEngine` when there is a new message for the
        low entry.

        :param msg: The message data
        :returns: None
        :rtype: None
        """
        ...
    
    def high_push(self, msg): # -> None:
        """
        Called by :py:class:`PipeEngine` when there is a new message for the
        high entry.

        :param msg: The message data
        :returns: None
        :rtype: None
        """
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    


class AutoSource(Source):
    def __init__(self, name=...) -> None:
        ...
    
    def deliver(self): # -> None:
        ...
    


class ThreadGenSource(AutoSource):
    def __init__(self, name=...) -> None:
        ...
    
    def generate(self): # -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    


class ConsoleSink(Sink):
    """Print messages on low and high entries to ``stdout``

    .. code::

         +-------+
      >>-|--.    |->>
         | print |
       >-|--'    |->
         +-------+
    """
    def push(self, msg): # -> None:
        ...
    
    def high_push(self, msg): # -> None:
        ...
    


class RawConsoleSink(Sink):
    """Print messages on low and high entries, using os.write

    .. code::

         +-------+
      >>-|--.    |->>
         | write |
       >-|--'    |->
         +-------+

    :param newlines: Include a new-line character after printing each packet.
                     Defaults to True.
    :type newlines: bool
    """
    def __init__(self, name=..., newlines=...) -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    def high_push(self, msg): # -> None:
        ...
    


class CLIFeeder(AutoSource):
    """Send messages from python command line:

    .. code::

         +--------+
      >>-|        |->>
         | send() |
       >-|   `----|->
         +--------+
    """
    def send(self, msg): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    


class CLIHighFeeder(CLIFeeder):
    """Send messages from python command line to high output:

    .. code::

         +--------+
      >>-|   .----|->>
         | send() |
       >-|        |->
         +--------+
    """
    def send(self, msg): # -> None:
        ...
    


class PeriodicSource(ThreadGenSource):
    """Generage messages periodically on low exit:

    .. code::

         +-------+
      >>-|       |->>
         | msg,T |
       >-|  `----|->
         +-------+
    """
    def __init__(self, msg, period, period2=..., name=...) -> None:
        ...
    
    def generate(self): # -> None:
        ...
    


class TermSink(Sink):
    """
    Prints messages on the low and high entries, on a separate terminal (xterm
    or cmd).

    .. code::

         +-------+
      >>-|--.    |->>
         | print |
       >-|--'    |->
         +-------+

    :param keepterm: Leave the terminal window open after :py:meth:`~Pipe.stop`
                     is called. Defaults to True.
    :type keepterm: bool
    :param newlines: Include a new-line character after printing each packet.
                     Defaults to True.
    :type newlines: bool
    :param openearly: Automatically starts the terminal when the constructor is
                      called, rather than waiting for :py:meth:`~Pipe.start`.
                      Defaults to True.
    :type openearly: bool
    """
    def __init__(self, name=..., keepterm=..., newlines=..., openearly=...) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    def high_push(self, msg): # -> None:
        ...
    


class QueueSink(Sink):
    """
    Collects messages on the low and high entries into a :py:class:`Queue`.
    Messages are dequeued with :py:meth:`recv`.
    Both high and low entries share the same :py:class:`Queue`.

    .. code::

         +-------+
      >>-|--.    |->>
         | queue |
       >-|--'    |->
         +-------+
    """
    def __init__(self, name=...) -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    def high_push(self, msg): # -> None:
        ...
    
    def recv(self, block=..., timeout=...): # -> None:
        """
        Reads the next message from the queue.

        If no message is available in the queue, returns None.

        :param block: Blocks execution until a packet is available in the
                      queue. Defaults to True.
        :type block: bool
        :param timeout: Controls how long to wait if ``block=True``. If None
                        (the default), this method will wait forever. If a
                        non-negative number, this is a number of seconds to
                        wait before giving up (and returning None).
        :type timeout: None, int or float
        """
        ...
    


class TransformDrain(Drain):
    """Apply a function to messages on low and high entry:

    .. code::

         +-------+
      >>-|--[f]--|->>
         |       |
       >-|--[f]--|->
         +-------+
    """
    def __init__(self, f, name=...) -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    def high_push(self, msg): # -> None:
        ...
    


class UpDrain(Drain):
    """Repeat messages from low entry to high exit:

    .. code::

         +-------+
      >>-|    ,--|->>
         |   /   |
       >-|--'    |->
         +-------+
    """
    def push(self, msg): # -> None:
        ...
    
    def high_push(self, msg): # -> None:
        ...
    


class DownDrain(Drain):
    r"""Repeat messages from high entry to low exit:

    .. code::

         +-------+
      >>-|--.    |->>
         |   \   |
       >-|    `--|->
         +-------+
    """
    def push(self, msg): # -> None:
        ...
    
    def high_push(self, msg): # -> None:
        ...
    


