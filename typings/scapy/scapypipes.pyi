"""
This type stub file was generated by pyright.
"""

from scapy.pipetool import Drain, Sink, Source

class SniffSource(Source):
    """Read packets from an interface and send them to low exit.

    .. code::

             +-----------+
          >>-|           |->>
             |           |
           >-|  [iface]--|->
             +-----------+

    If neither of the ``iface`` or ``socket`` parameters are specified, then
    Scapy will capture from the first network interface.

    :param iface: A layer 2 interface to sniff packets from. Mutually
                  exclusive with the ``socket`` parameter.
    :param filter: Packet filter to use while capturing. See ``L2listen``.
                   Not used with ``socket`` parameter.
    :param socket: A ``SuperSocket`` to sniff packets from.
    """
    def __init__(self, iface=..., filter=..., socket=..., name=...) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    
    def fileno(self):
        ...
    
    def check_recv(self): # -> Literal[True]:
        ...
    
    def deliver(self): # -> None:
        ...
    


class RdpcapSource(Source):
    """Read packets from a PCAP file send them to low exit.

    .. code::

         +----------+
      >>-|          |->>
         |          |
       >-|  [pcap]--|->
         +----------+
    """
    def __init__(self, fname, name=...) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    
    def fileno(self): # -> int:
        ...
    
    def check_recv(self): # -> Literal[True]:
        ...
    
    def deliver(self): # -> None:
        ...
    


class InjectSink(Sink):
    """Packets received on low input are injected to an interface

    .. code::

         +-----------+
      >>-|           |->>
         |           |
       >-|--[iface]  |->
         +-----------+
    """
    def __init__(self, iface=..., name=...) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    


class Inject3Sink(InjectSink):
    def start(self): # -> None:
        ...
    


class WrpcapSink(Sink):
    """
    Writes :py:class:`Packet` on the low entry to a ``pcap`` file.
    Ignores all messages on the high entry.

    .. note::

        Due to limitations of the ``pcap`` format, all packets **must** be of
        the same link type. This class will not mutate packets to conform with
        the expected link type.

    .. code::

         +----------+
      >>-|          |->>
         |          |
       >-|--[pcap]  |->
         +----------+

    :param fname: Filename to write packets to.
    :type fname: str
    :param linktype: See :py:attr:`linktype`.
    :type linktype: None or int

    .. py:attribute:: linktype

        Set an explicit link-type (``DLT_``) for packets.  This must be an
        ``int`` or ``None``.

        This is the same as the :py:func:`wrpcap` ``linktype`` parameter.

        If ``None`` (the default), the linktype will be auto-detected on the
        first packet. This field will *not* be updated with the result of this
        auto-detection.

        This attribute has no effect after calling :py:meth:`PipeEngine.start`.
    """
    def __init__(self, fname, name=..., linktype=...) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    


class WiresharkSink(WrpcapSink):
    """
    Streams :py:class:`Packet` from the low entry to Wireshark.

    Packets are written into a ``pcap`` stream (like :py:class:`WrpcapSink`),
    and streamed to a new Wireshark process on its ``stdin``.

    Wireshark is run with the ``-ki -`` arguments, which cause it to treat
    ``stdin`` as a capture device.  Arguments in :py:attr:`args` will be
    appended after this.

    Extends :py:mod:`WrpcapSink`.

    .. code::

         +----------+
      >>-|          |->>
         |          |
       >-|--[pcap]  |->
         +----------+

    :param linktype: See :py:attr:`WrpcapSink.linktype`.
    :type linktype: None or int
    :param args: See :py:attr:`args`.
    :type args: None or list[str]

    .. py:attribute:: args

        Additional arguments for the Wireshark process.

        This must be either ``None`` (the default), or a ``list`` of ``str``.

        This attribute has no effect after calling :py:meth:`PipeEngine.start`.

        See :manpage:`wireshark(1)` for more details.
    """
    def __init__(self, name=..., linktype=..., args=...) -> None:
        ...
    
    def start(self): # -> None:
        ...
    


class UDPDrain(Drain):
    """UDP payloads received on high entry are sent over UDP

    .. code::

         +-------------+
      >>-|--[payload]--|->>
         |      X      |
       >-|----[UDP]----|->
         +-------------+
    """
    def __init__(self, ip=..., port=...) -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    def high_push(self, msg): # -> None:
        ...
    


class FDSourceSink(Source):
    """Use a file descriptor as source and sink

    .. code::

         +-------------+
      >>-|             |->>
         |             |
       >-|-[file desc]-|->
         +-------------+
    """
    def __init__(self, fd, name=...) -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    def fileno(self):
        ...
    
    def deliver(self): # -> None:
        ...
    


class TCPConnectPipe(Source):
    """TCP connect to addr:port and use it as source and sink

    .. code::

         +-------------+
      >>-|             |->>
         |             |
       >-|-[addr:port]-|->
         +-------------+
    """
    __selectable_force_select__ = ...
    def __init__(self, addr=..., port=..., name=...) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    def fileno(self): # -> int:
        ...
    
    def deliver(self): # -> None:
        ...
    


class TCPListenPipe(TCPConnectPipe):
    """TCP listen on [addr:]port and use first connection as source and sink;
    send peer address to high output

    .. code::

         +------^------+
      >>-|    +-[peer]-|->>
         |   /         |
       >-|-[addr:port]-|->
         +-------------+
    """
    __selectable_force_select__ = ...
    def __init__(self, addr=..., port=..., name=...) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    def deliver(self): # -> None:
        ...
    


class UDPClientPipe(TCPConnectPipe):
    """UDP send packets to addr:port and use it as source and sink
    Start trying to receive only once a packet has been send

    .. code::

         +-------------+
      >>-|             |->>
         |             |
       >-|-[addr:port]-|->
         +-------------+
    """
    def __init__(self, addr=..., port=..., name=...) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    def deliver(self): # -> None:
        ...
    


class UDPServerPipe(TCPListenPipe):
    """UDP bind to [addr:]port and use as source and sink
    Use (ip, port) from first received IP packet as destination for all data

    .. code::

         +------^------+
      >>-|    +-[peer]-|->>
         |   /         |
       >-|-[addr:port]-|->
         +-------------+
    """
    def __init__(self, addr=..., port=..., name=...) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    def deliver(self): # -> None:
        ...
    


class TriggeredMessage(Drain):
    """Send a preloaded message when triggered and trigger in chain

    .. code::

         +------^------+
      >>-|      | /----|->>
         |      |/     |
       >-|-[ message ]-|->
         +------^------+
    """
    def __init__(self, msg, name=...) -> None:
        ...
    
    def on_trigger(self, trigmsg): # -> None:
        ...
    


class TriggerDrain(Drain):
    """Pass messages and trigger when a condition is met

    .. code::

         +------^------+
      >>-|-[condition]-|->>
         |      |      |
       >-|-[condition]-|->
         +-------------+
    """
    def __init__(self, f, name=...) -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    def high_push(self, msg): # -> None:
        ...
    


class TriggeredValve(Drain):
    """Let messages alternatively pass or not, changing on trigger

.. code::

         +------^------+
      >>-|-[pass/stop]-|->>
         |      |      |
       >-|-[pass/stop]-|->
         +------^------+
    """
    def __init__(self, start_state=..., name=...) -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    def high_push(self, msg): # -> None:
        ...
    
    def on_trigger(self, msg): # -> None:
        ...
    


class TriggeredQueueingValve(Drain):
    """Let messages alternatively pass or queued, changing on trigger

    .. code::

         +------^-------+
      >>-|-[pass/queue]-|->>
         |      |       |
       >-|-[pass/queue]-|->
         +------^-------+
    """
    def __init__(self, start_state=..., name=...) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    def high_push(self, msg): # -> None:
        ...
    
    def on_trigger(self, msg):
        ...
    


class TriggeredSwitch(Drain):
    r"""Let messages alternatively high or low, changing on trigger

    .. code::

         +------^------+
      >>-|-\    |    /-|->>
         |  [up/down]  |
       >-|-/    |    \-|->
         +------^------+
    """
    def __init__(self, start_state=..., name=...) -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    high_push = ...
    def on_trigger(self, msg): # -> None:
        ...
    


class ConvertPipe(Drain):
    """Packets sent on entry are converted to another type of packet.

    .. code::

         +-------------+
      >>-|--[convert]--|->>
         |             |
       >-|--[convert]--|->
         +-------------+

    See ``Packet.convert_packet``.
    """
    def __init__(self, low_type=..., high_type=..., name=...) -> None:
        ...
    
    def push(self, msg): # -> None:
        ...
    
    def high_push(self, msg): # -> None:
        ...
    


